{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport data from './data/data.json'; //initial state\n\nconst startState = {\n  cards: []\n}; //Actions\n\nexport const initialCards = () => {\n  return {\n    type: 'INITIALCARDS',\n    cards: data\n  };\n}; //Add Item\n\nexport const addItem = item => {\n  return {\n    type: 'ADD',\n    item\n  };\n}; // reducer\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INITIALCARDS':\n      return {\n        cards: action.cards\n      };\n\n    case 'ADD':\n      return _objectSpread({}, state, {\n        cards: [...state.cards, action.item]\n      });\n\n    default:\n      return state;\n  }\n}; // create store\n\nexport const initStore = (intialState = startState) => {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n};","map":{"version":3,"sources":["/alidhobey/Desktop/glyon/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","data","startState","cards","initialCards","type","addItem","item","reducer","state","initialState","action","initStore","intialState"],"mappings":";;;;;;AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,kBAAjB,C,CAEA;;AACA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE;AADQ,CAAnB,C,CAIA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHC,IAAAA,IAAI,EAAE,cADH;AAEHF,IAAAA,KAAK,EAAEF;AAFJ,GAAP;AAIH,CALM,C,CAMP;;AACA,OAAO,MAAMK,OAAO,GAAGC,IAAD,IAAU;AAC5B,SAAO;AACHF,IAAAA,IAAI,EAAE,KADH;AAEHE,IAAAA;AAFG,GAAP;AAIH,CALM,C,CAMP;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGC,YAAT,EAAuBC,MAAvB,KAAkC;AACrD,UAAOA,MAAM,CAACN,IAAd;AACI,SAAK,cAAL;AACI,aAAO;AACHF,QAAAA,KAAK,EAAEQ,MAAM,CAACR;AADX,OAAP;;AAGA,SAAK,KAAL;AACI,+BACOM,KADP;AAEIN,QAAAA,KAAK,EAAE,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAiBQ,MAAM,CAACJ,IAAxB;AAFX;;AAIA;AAAS,aAAOE,KAAP;AAVrB;AAYH,CAbM,C,CAgBP;;AACA,OAAO,MAAMG,SAAS,GAAG,CAACC,WAAW,GAAGX,UAAf,KAA8B;AACnD,SAAOL,WAAW,CAACW,OAAD,EAAUE,YAAV,EAAwBX,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAA3C,CAAlB;AACH,CAFM","sourcesContent":["import {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport data from './data/data.json';\n\n//initial state\nconst startState = {\n    cards: []\n}\n\n//Actions\nexport const initialCards = () => {\n    return {\n        type: 'INITIALCARDS',\n        cards: data\n    }\n}\n//Add Item\nexport const addItem =(item) => {\n    return {\n        type: 'ADD',\n        item\n    }\n}\n// reducer\nexport const reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'INITIALCARDS':\n            return {\n                cards: action.cards,\n            }\n            case 'ADD':\n                return {\n                    ...state,\n                    cards: [...state.cards, action.item]\n                }\n                default: return state\n    }\n}\n\n\n// create store\nexport const initStore = (intialState = startState) => {\n    return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}"]},"metadata":{},"sourceType":"module"}